/**
 * @param {number[]} nums
 * @param {(accum: number, curr: number) => number} fn
 * @param {number} init
 * @return {number}
 */
var reduce = function(nums, fn, init) {
    let result = init;
    for (let i = 0; i < nums.length; i++) {
        result = fn(result, nums[i]);
    }
    return result;
};

// Example Usage:

const sum = (accum, curr) => accum + curr;
console.log(reduce([1, 2, 3, 4], sum, 0)); // Output: 10

const sumOfSquares = (accum, curr) => accum + curr * curr;
console.log(reduce([1, 2, 3, 4], sumOfSquares, 100)); // Output: 130

const constantZero = (accum, curr) => 0;
console.log(reduce([], constantZero, 25)); // Output: 25
